{"version":3,"sources":["dev-server.js"],"names":[],"mappings":"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","file":"dev-server-compiled.js","sourcesContent":["require('./check-versions')()\n\nvar config = require('../config')\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n\nvar opn = require('opn')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar proxyMiddleware = require('http-proxy-middleware')\nvar webpackConfig = require('./webpack.dev.conf')\nvar axios = require('axios')\n\n// default port where dev server listens for incoming traffic\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nvar proxyTable = config.dev.proxyTable\n\nvar app = express()\n\nvar apiRoutes =express.Router()\n\napiRoutes.get('/getDiscList', function (req, res) {\n  var url = 'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'\n  axios.get(url, {\n    headers: {\n      referer: 'https://c.y.qq.com/',\n      host: 'c.y.qq.com'\n    },\n    params: req.query\n  }).then((response) => {\n    res.json(response.data)\n  }).catch((e) => {\n    console.log(e)\n  })\n})\n\napiRoutes.get('/tyric', function (req, res) {\n  var url = 'https://c.y.qq.com/lyric/fcgi-bin/fcg_query_lyric_new.fcg'\n  axios.get(url, {\n    headers: {\n      referer: 'https://c.y.qq.com/',\n      host: 'c.y.qq.com'\n    },\n    params: req.query\n  }).then((response) => {\n    let ret = response.data\n    if (typeof ret === 'string') {\n      var reg = /^\\w+\\(({[^()]+})\\)$/\n      var mathes = ret.match(reg)\n      if (mathes) {\n        ret = JSON.parse(mathes[1])\n      }\n    }\n\n    res.json(ret)\n  }).catch((e) => {\n    console.log(e)\n  })\n})\n\napp.use('/api', apiRoutes)\n\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: false,\n  heartbeat: 2000\n})\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = { target: options }\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// serve pure static assets\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static'))\n\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri)\n  }\n  _resolve()\n})\n\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n"]}