{"version":3,"sources":["cache.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,cAApB;;AAEA,IAAM,aAAa,YAAnB;AACA,IAAM,oBAAoB,EAA1B;;AAEA,OAAO,SAAS,UAAT,CAAqB,KAArB,EAA4B;AACjC,MAAI,WAAW,QAAQ,GAAR,CAAY,UAAZ,EAAwB,EAAxB,CAAf;AACA,cAAY,QAAZ,EAAsB,KAAtB,EAA6B,UAAC,IAAD,EAAU;AACrC,WAAO,SAAS,KAAhB;AACD,GAFD,EAEG,iBAFH;;AAIA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,QAAxB;;AAEA,SAAO,QAAP;AACD;;AAED,OAAO,SAAS,YAAT,CAAuB,KAAvB,EAA8B;AACnC,MAAI,WAAW,QAAQ,GAAR,CAAY,UAAZ,EAAwB,EAAxB,CAAf;AACA,kBAAgB,QAAhB,EAA0B,UAAC,IAAD,EAAU;AAClC,WAAO,SAAS,KAAhB;AACD,GAFD;;AAIA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,QAAxB;;AAEA,SAAO,QAAP;AACD;;AAED,OAAO,SAAS,WAAT,GAAwB;AAC7B,UAAQ,MAAR,CAAe,UAAf;AACA,SAAO,EAAP;AACD;;AAED,SAAS,WAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC,OAAhC,EAAyC,MAAzC,EAAiD;AAC/C,MAAM,QAAQ,IAAI,SAAJ,CAAc,OAAd,CAAd;AACA,MAAI,UAAU,CAAd,EAAiB;AACf;AACD;;AAED,MAAI,QAAQ,CAAZ,EAAe;AACb,QAAI,MAAJ,CAAW,KAAX,EAAkB,CAAlB;AACD;AACD,MAAI,OAAJ,CAAY,GAAZ;;AAEA,MAAI,UAAU,IAAI,MAAJ,GAAa,MAA3B,EAAmC;AACjC,QAAI,GAAJ;AACD;AACF;;AAED,SAAS,eAAT,CAA0B,GAA1B,EAA+B,OAA/B,EAAwC;AACtC,MAAM,QAAQ,IAAI,SAAJ,CAAc,OAAd,CAAd;AACA,MAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,QAAI,MAAJ,CAAW,KAAX,EAAkB,CAAlB;AACD;AACF;;AAED,OAAO,SAAS,WAAT,GAAwB;AAC7B,SAAO,QAAQ,GAAR,CAAY,UAAZ,EAAwB,EAAxB,CAAP;AACD","file":"cache-compiled.js","sourcesContent":["import storage from 'good-storage'\n\nconst SEARCH_KEY = '__search__'\nconst SEARCH_MAX_LENGTH = 15\n\nexport function saveSearch (query) {\n  let searches = storage.get(SEARCH_KEY, [])\n  insertAarry(searches, query, (item) => {\n    return item === query\n  }, SEARCH_MAX_LENGTH)\n\n  storage.set(SEARCH_KEY, searches)\n\n  return searches\n}\n\nexport function deleteSearch (query) {\n  let searches = storage.get(SEARCH_KEY, [])\n  deleteFromArray(searches, (item) => {\n    return item === query\n  })\n\n  storage.set(SEARCH_KEY, searches)\n\n  return searches\n}\n\nexport function clearSearch () {\n  storage.remove(SEARCH_KEY)\n  return []\n}\n\nfunction insertAarry (arr, val, compare, maxLen) {\n  const index = arr.findIndex(compare)\n  if (index === 0) {\n    return\n  }\n\n  if (index > 0) {\n    arr.splice(index, 1)\n  }\n  arr.unshift(val)\n\n  if (maxLen && arr.length > maxLen) {\n    arr.pop()\n  }\n}\n\nfunction deleteFromArray (arr, compare) {\n  const index = arr.findIndex(compare)\n  if (index > -1) {\n    arr.splice(index, 1)\n  }\n}\n\nexport function localSearch () {\n  return storage.get(SEARCH_KEY, [])\n}\n"]}